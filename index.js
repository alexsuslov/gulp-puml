// Generated by CoffeeScript 1.10.0
'use strict';
var PumlRenderer, gulpPuml, gutil, path, stream, streamBuffers, through;

gutil = require('gulp-util');

through = require('through2');

PumlRenderer = require('esf-puml').PumlRenderer;

streamBuffers = require('stream-buffers');

stream = require('stream');

path = require('path');

gulpPuml = function(opt) {
  var ext, options, ref;
  options = opt || {
    format: 'svg'
  };
  if (options.format && ((ref = options.format) === 'png' || ref === 'svg' || ref === 'eps')) {
    ext = options.format;
  }
  return through.obj(function(file, enc, cb) {
    var ccwd, e, error, error1, fcnt, rdblStmBfr, rdr;
    if (file.isNull()) {
      cb(null, file);
      return;
    }
    rdr = new PumlRenderer;
    ccwd = null || options.cwd || path.dirname(file.path);
    if (file.isBuffer()) {
      try {
        rdblStmBfr = new streamBuffers.ReadableStreamBuffer({
          'frequency': 10,
          'chunkSize': 1024 * 4
        });
        fcnt = file.contents;
        file.contents = rdblStmBfr.pipe(rdr.stream(ext, ccwd));
        rdblStmBfr.put(fcnt, 'utf8');
        rdblStmBfr.on('end', function() {
          rdblStmBfr.stop();
        });
      } catch (error) {
        e = error;
        this.emit('error', new gutil.PluginError('gulp-puml', e));
      }
    } else if (file.isStream()) {
      try {
        file.contents = file.contents.pipe(rdr.stream(ext, ccwd));
      } catch (error1) {
        e = error1;
        this.emit('error', new gutil.PluginError('gulp-puml', e));
      }
    }
    if (file.path) {
      file.path = file.path.replace(/\.puml/ig, '.' + ext);
    }
    cb(null, file);
  });
};

module.exports = gulpPuml;
